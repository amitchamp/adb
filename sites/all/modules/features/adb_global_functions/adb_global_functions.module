<?php

/**
 * @file
 * Code for the Global functions feature.
 */

include_once 'adb_global_functions.features.inc';

/**
 * Implements hook_preprocess_views_view().
 */
function adb_global_functions_preprocess_views_view(&$variables) {
  switch ($variables['view']->name) {
    case 'views_topics_menu':
    case 'views_countries_menu':
      $variables['theme_hook_suggestions'][] = 'views_view_adb_menu';
      drupal_add_js(drupal_get_path('module', 'adb_global_functions') . '/js/adb_global_functions.js');

      break;
  }
}

/**
 * Implements hook_block_info().
 */
function adb_global_functions_block_info() {
  $blocks['adb_profile_access'] = array(
    'info' => t('Profile access'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function adb_global_functions_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'adb_profile_access':
      module_load_include('inc', 'adb_global_functions', 'includes/adb_global_functions.blocks');
      $block['content'] = array(
        '#markup' => adb_global_functions_profile_access_markup(),
        '#attached' => array(
          'js' => array(
            drupal_get_path('module', 'adb_global_functions') . '/js/adb_global_functions.js',
          ),
          'css' => array(
            drupal_get_path('module', 'adb_global_functions') . '/css/adb_global_functions.css',
          ),
        ),
      );

      break;

  }

  return $block;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function adb_global_functions_form_search_block_form_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][] = 'adb_global_functions_search_form_redirect';
}

/**
 * Submit handler for search block form.
 */
function adb_global_functions_search_form_redirect($form, &$form_state) {
  // Stay where you are if you perform empty search.
  if (empty($form_state['values']['search_block_form'])) {
    $form_state['redirect'] = current_path();
  }
}

/**
 * Implements hook_preprocess_rate_template_yesno().
 */
function adb_global_functions_preprocess_rate_template_yesno(&$variables) {
  global $user;
  $node = menu_get_object();
  $widgets = rate_get_active_widgets('node', $node->type);

  // Get value for 'Yes' and 'No'.
  // @todo We consider that only widget is embedded for a node.
  $widget = array_shift($widgets);
  $yes_value = $widget->options[0][0];
  $no_value = $widget->options[1][0];

  // Alter rate widget based on user's vote.
  $result = votingapi_select_votes(array(
    'uid' => $user->uid,
    'entity_id' => $node->nid,
  ));
  if (!empty($result) && ($result[0]['value'] == $yes_value || $result[0]['value'] == $no_value)) {
    $variables['user_voted'] = TRUE;
    $variables['user_voted_message'] = t('Thank you for your feedback.');
  }
  else {
    $variables['user_voted'] = FALSE;
  }

  // Do not show votes.
  $variables['links'][0]['votes'] = '';
  $variables['links'][1]['votes'] = '';
}

/**
 * Implements hook_rate_widget_alter().
 */
function adb_global_functions_rate_widget_alter(&$widget, $context) {
  global $user;

  // Get value for 'Yes' and 'No'.
  $yes_value = $widget->options[0][0];
  $no_value = $widget->options[1][0];

  // Alter widget title based on user's vote.
  $result = votingapi_select_votes(array(
    'uid' => $user->uid,
    'entity_id' => $context['content_id'],
  ));
  if (!empty($result) && ($result[0]['value'] == $yes_value || $result[0]['value'] == $no_value)) {
    $widget->title = '';
  }
  else {
    $widget->title = t('Was this article useful?');
  }
}
