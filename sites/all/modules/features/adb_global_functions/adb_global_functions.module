<?php

/**
 * @file
 * Code for the Global functions feature.
 */

include_once 'adb_global_functions.features.inc';

/**
 * Implements hook_preprocess_views_view().
 */
function adb_global_functions_preprocess_views_view(&$variables) {
  switch ($variables['view']->name) {
    case 'views_topics_menu':
    case 'views_countries_menu':
      $variables['theme_hook_suggestions'][] = 'views_view__adb_menu';
      drupal_add_js(drupal_get_path('module', 'adb_global_functions') . '/js/adb_global_functions.js');

      break;
  }
}

/**
 * Implements hook_block_info().
 */
function adb_global_functions_block_info() {
  $blocks['adb_profile_access'] = array(
    'info' => t('Profile access'),
  );
  $blocks['adb_footer'] = array(
    'info' => t('ADB footer'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function adb_global_functions_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'adb_profile_access':
      module_load_include('inc', 'adb_global_functions', 'includes/adb_global_functions.blocks');
      $block['content'] = array(
        '#markup' => adb_global_functions_profile_access_markup(),
        '#attached' => array(
          'js' => array(
            drupal_get_path('module', 'adb_global_functions') . '/js/adb_global_functions.js',
          ),
          'css' => array(
            drupal_get_path('module', 'adb_global_functions') . '/css/adb_global_functions.css',
          ),
        ),
      );

      break;

    case 'adb_footer':
      // Footer logo.
      $footer_logo_image = theme('image', array(
        'path' => drupal_get_path('theme', 'adb') . '/images/adb-footer.png',
        'alt' => 'ADB',
      ));
      $logo_text = '<span class="logo-primary-text">' . t('An initiative by:') . '</span>' . $footer_logo_image . '<span class="logo-secondary-text">www.adb.org</span>';
      $logo_markup = l($logo_text, 'http://www.adb.org', array(
        'attributes' => array(
          'target' => '_blank',
        ),
        'external' => TRUE,
        'html' => TRUE,
      ));

      // Footer slider.
      $slider_texts = array();
      $slider_text_vocabulary = taxonomy_vocabulary_machine_name_load('vocabulary_footer_slider_text');
      $slider_texts_terms = taxonomy_get_tree($slider_text_vocabulary->vid);
      foreach ($slider_texts_terms as $value) {
        $slider_texts[] = array(
          'data' => $value->name,
        );
      }
      $slider_markup = theme('item_list', array(
        'items' => $slider_texts,
        'attributes' => array(
          'class' => array(
            'slider-wrapper',
            'slides',
          ),
        ),
      ));

      // Social links.
      $links = array(
        array(
          'title' => t('Facebook'),
          'href' => 'https://www.facebook.com/AsianDevBank',
          'attributes' => array(
            'class' => array(
              'facebook',
            ),
            'target' => '_blank',
          ),
        ),
        array(
          'title' => t('Twitter'),
          'href' => 'https://twitter.com/ADB_HQ',
          'attributes' => array(
            'class' => array(
              'twitter',
            ),
            'target' => '_blank',
          ),
        ),
        array(
          'title' => t('LinkedIn'),
          'href' => 'https://www.linkedin.com/company/asian-development-bank',
          'attributes' => array(
            'class' => array(
              'linkedin',
            ),
            'target' => '_blank',
          ),
        ),
      );

      $block['content'] = array(
        '#markup' => theme('adb_footer', array(
          'logo_markup' => $logo_markup,
          'slider_markup' => $slider_markup,
          'site_name' => variable_get('site_name'),
          'copyright_text' => t('@year Asian Development Bank', array(
            '@year' => date('Y'),
          )),
          'social_links' => theme('links', array(
            'links' => $links,
          )),
        )),
        '#attached' => array(
          'js' => array(
            drupal_get_path('module', 'adb_global_functions') . '/js/adb_global_functions.js',
          ),
          'library' => array(
            array('flexslider', 'flexslider'),
          ),
        ),
      );

      break;

  }

  return $block;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function adb_global_functions_form_search_block_form_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][] = 'adb_global_functions_search_form_redirect';
}

/**
 * Submit handler for search block form.
 */
function adb_global_functions_search_form_redirect($form, &$form_state) {
  // Stay where you are if you perform empty search.
  if (empty($form_state['values']['search_block_form'])) {
    $form_state['redirect'] = current_path();
  }
}

/**
 * Implements hook_preprocess_rate_template_yesno().
 */
function adb_global_functions_preprocess_rate_template_yesno(&$variables) {
  global $user;
  $node = menu_get_object();
  $widgets = rate_get_active_widgets('node', $node->type);

  // Get value for 'Yes' and 'No'.
  // @todo We consider that only widget is embedded for a node.
  $widget = array_shift($widgets);
  $yes_value = $widget->options[0][0];
  $no_value = $widget->options[1][0];

  // Alter rate widget based on user's vote.
  $result = votingapi_select_votes(array(
    'uid' => $user->uid,
    'entity_id' => $node->nid,
  ));
  if (!empty($result) && ($result[0]['value'] == $yes_value || $result[0]['value'] == $no_value)) {
    $variables['user_voted'] = TRUE;
    $variables['user_voted_message'] = t('Thank you for your feedback.');
  }
  else {
    $variables['user_voted'] = FALSE;
  }

  // Do not show votes.
  $variables['links'][0]['votes'] = '';
  $variables['links'][1]['votes'] = '';
}

/**
 * Implements hook_rate_widget_alter().
 */
function adb_global_functions_rate_widget_alter(&$widget, $context) {
  global $user;

  // Get value for 'Yes' and 'No'.
  $yes_value = $widget->options[0][0];
  $no_value = $widget->options[1][0];

  // Alter widget title based on user's vote.
  $result = votingapi_select_votes(array(
    'uid' => $user->uid,
    'entity_id' => $context['content_id'],
  ));
  if (!empty($result) && ($result[0]['value'] == $yes_value || $result[0]['value'] == $no_value)) {
    $widget->title = '';
  }
  else {
    $widget->title = t('Was this article useful?');
  }
}

/**
 * Implements hook_theme().
 */
function adb_global_functions_theme($existing, $type, $theme, $path) {
  return array(
    'adb_footer' => array(
      'variables' => array(
        'logo_markup' => NULL,
        'slider_markup' => NULL,
        'site_name' => NULL,
        'copyright_text' => NULL,
        'social_links' => NULL,
      ),
      'template' => 'templates/adb-footer',
    ),
  );
}

/**
 * Implements HOOK_preprocess_comment_wrapper().
 */
function adb_global_functions_preprocess_comment_wrapper(&$variables) {
  $variables['comment_count_text'] = format_plural($variables['node']->comment_count, '1 comment', '@count comments');
  // We are showing comments rendered from views.
  $variables['views_comments'] = views_embed_view('views_recent_comments', 'block_recent_comments', $variables['node']->nid);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function adb_global_functions_form_comment_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  // Comment form customizations.
  $form['subject']['#access'] = FALSE;
  $form['author']['#access'] = FALSE;
  $form['comment_body'][$form['comment_body']['#language']][0]['value']['#title'] = '';
  $form['author_picture'] = array(
    '#weight' => $form['comment_body']['#weight'] - 1,
    '#markup' => theme('user_picture', array(
      'account' => $user,
    )),
    '#prefix' => '<div class="comment-form-user-picture-wrapper">',
  );
  $form['comment_body']['#suffix'] = '</div>';
}

/**
 * Implements HOOK_preprocess_node().
 */
function adb_global_functions_preprocess_node(&$variables) {
  if (!empty($widgets)) {
    // Add wrapper for rate widget.
    $variables['content']['rate_rate_useful_content']['#prefix'] = '<div class="rate-widget-wrapper">';
    $variables['content']['rate_rate_useful_content']['#suffix'] = '</div>';
  }

  // If user is logged in disable "Add new comment" link.
  if (user_is_logged_in()) {
    unset($variables['content']['links']['comment']);
  }
}

/**
 * Implements HOOK_preprocess_comment().
 */
function adb_global_functions_preprocess_comment(&$variables) {
  $variables['comment_duration'] = format_interval(REQUEST_TIME - $variables['comment']->created);
  $variables['comment_submitted'] = t('Submitted this comment from the section');
}

/**
 * Implements HOOK_preprocess_views_view_list().
 */
function adb_global_functions_preprocess_views_view_list(&$variables) {
  $variables['rows_count'] = count($variables['rows']);

  // Add comment toggle markup.
  $variables['comment_more_toggle_markup'] = '<div class="comment-more-toggle">' . t('Join the conversations') . '</div>';

  // Comment toggle wrapper prefix.
  // This will be prepended in second comment.
  $variables['comment_more_toggle_wrapper_prefix'] = '<div class="comment-more-toggle-wrapper" style="display: none;">';

  // Comment toggle wrapper suffix.
  // This will be appended after last comment.
  $variables['comment_more_toggle_wrapper_suffix'] = '</div>';

  drupal_add_js(drupal_get_path('module', 'adb_global_functions') . '/js/adb_global_functions.js');
}
